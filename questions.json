{
  "categories": [
    {
      "name": "1",
      "questions": [
        {
          "index": 1,
          "question": "What is the difference between the World Wide Web and the Internet?",
          "answer": "The World Wide Web (WWW) is a system of interlinked hypertext documents accessed via the Internet. The Internet, on the other hand, is a global network of interconnected computers that communicate using standard protocols. In essence, the Internet provides the infrastructure for the WWW to exist and operate.",
          "category": "Category 1"
        },
        {
          "index": 2,
          "question": "Explain the client-server architecture in the context of web development.",
          "answer": "In the client-server architecture, clients are devices (such as computers or smartphones) that request services or resources from servers. Servers are computers that provide services or resources to clients. In web development, clients typically refer to web browsers, while servers host websites and serve web pages to clients upon request.",
          "category": "Category 1"
        },
        {
          "index": 3,
          "question": "What is HTTP and how does it work?",
          "answer": "HTTP (Hypertext Transfer Protocol) is the protocol used for communication between web browsers and web servers. It defines how messages are formatted and transmitted, allowing for the transfer of hypertext documents, such as HTML files. HTTP operates on a client-server model, where clients send requests for resources and servers respond with the requested content.",
          "category": "Category 1"
        },
        {
          "index": 4,
          "question": "What are the primary HTTP request methods and their purposes?",
          "answer": "The primary HTTP request methods are GET, POST, PUT, DELETE, and HEAD. GET is used to request data from a specified resource, POST is used to submit data to be processed to a specified resource, PUT is used to upload data to a specified resource, DELETE is used to delete a specified resource, and HEAD is used to request headers from a specified resource without transferring the entire content.",
          "answerImage": "/images/httprequests.png",
          "category": "Category 1"
        },
        {
          "index": 5,
          "question": "Describe the difference between HTTP and HTTPS.",
          "answer": "HTTP (Hypertext Transfer Protocol) is the standard protocol used for transmitting data over the Internet. HTTPS (Hypertext Transfer Protocol Secure) is the secure version of HTTP, which uses encryption to ensure that data transmitted between the client and server is secure and cannot be intercepted or tampered with by third parties.",
          "category": "Category 1"
        },
        {
          "index": 6,
          "question": "What is DNS and how does it facilitate web browsing?",
          "answer": "DNS (Domain Name System) is a decentralized naming system for computers, services, or other resources connected to the Internet or a private network. It translates domain names (e.g., www.example.com) into IP addresses (e.g., 192.0.2.1), allowing users to access websites using easy-to-remember domain names instead of numeric IP addresses.",
          "category": "Category 1"
        },
        {
          "index": 7,
          "question": "Explain the concept of a URL (Uniform Resource Locator).",
          "answer": "A URL (Uniform Resource Locator) is a reference or address used to locate resources on the Internet. It consists of several components, including the protocol (e.g., HTTP, HTTPS), the domain name (e.g., www.example.com), the path to the resource (e.g., /index.html), and optional query parameters (e.g., ?id=123).",
          "category": "Category 1"
        },
        {
          "index": 8,
          "question": "What are the main components of a URL?",
          "answer": "The main components of a URL include the protocol (e.g., HTTP, HTTPS), the domain name (e.g., www.example.com), the port number (optional, default is 80 for HTTP and 443 for HTTPS), the path to the resource (e.g., /index.html), and optional query parameters (e.g., ?id=123).",
          "answerImage": "/images/urlparts.png",
          "category": "Category 1"
        },
        {
          "index": 9,
          "question": "What is a web browser and how does it function?",
          "answer": "A web browser is a software application used to access information on the World Wide Web. It retrieves and displays web pages, interprets HTML, CSS, and JavaScript, and enables users to interact with web content. Popular web browsers include Google Chrome, Mozilla Firefox, Microsoft Edge, and Safari.",
          "category": "Category 1"
        },
        {
          "index": 10,
          "question": "What is a web server and how does it serve web pages?",
          "answer": "A web server is a computer program or software application that serves requested web pages to clients over the Internet or a local network. It listens for incoming requests from clients, processes those requests, and sends back the requested web pages along with any associated resources, such as images, stylesheets, or scripts.",
          "category": "Category 1"
        },
        {
          "index": 11,
          "question": "What are cookies and how are they used in web development?",
          "answer": "Cookies are small pieces of data stored on the client-side by web browsers. They are used to store information about the user or their interactions with the website, such as login credentials, preferences, shopping cart items, or tracking identifiers. Cookies are sent with each HTTP request to the server and can be read, modified, or deleted by both the client and server. They are commonly used for session management, personalization, and tracking purposes in web development.",
          "category": "Category 1"
        },
        {
          "index": 12,
          "question": "Explain the concept of web caching and its benefits.",
          "answer": "Web caching is the process of storing copies of web resources such as HTML pages, images, stylesheets, or scripts temporarily on a local device or server. Caching reduces the need to re-fetch resources from the original server, improving the performance and efficiency of web browsing and reducing network traffic. Web caching can occur at different levels, including the browser cache, proxy servers, and content delivery networks (CDNs), and can be controlled using cache-control headers or meta tags in HTTP responses.",
          "category": "Category 1"
        },
        {
          "index": 13,
          "question": "What are web standards and why are they important?",
          "answer": "Web standards are guidelines, specifications, and best practices established by standardization organizations such as the World Wide Web Consortium (W3C) and the Internet Engineering Task Force (IETF) to ensure interoperability, compatibility, and accessibility of web technologies. Adhering to web standards helps web developers create websites that work consistently across different browsers, devices, and platforms, are accessible to people with disabilities, and are future-proofed against changes in technology or browser updates.",
          "category": "Category 1"
        },
        {
          "index": 14,
          "question": "What is SEO (Search Engine Optimization) and why is it important for websites?",
          "answer": "SEO (Search Engine Optimization) is the practice of optimizing websites to improve their visibility and ranking in search engine results pages (SERPs). It involves various techniques such as keyword research, on-page optimization, off-page optimization, technical optimization, content creation, link building, and performance optimization. SEO aims to increase organic traffic to websites, attract relevant visitors, and ultimately improve the online visibility, credibility, and profitability of businesses and organizations.",
          "category": "Category 1"
        },
        {
          "index": 15,
          "question": "Explain the importance of website accessibility and some best practices for achieving it.",
          "answer": "Website accessibility refers to the inclusive practice of designing and developing websites that can be accessed, understood, and used by people of all abilities, including those with disabilities. It involves following accessibility guidelines and standards such as the Web Content Accessibility Guidelines (WCAG), ensuring compatibility with assistive technologies such as screen readers, providing alternative text for images, captions for videos, and semantic HTML markup, and conducting usability testing with diverse user groups. Accessible websites benefit everyone by improving usability, user experience, search engine visibility, and compliance with legal requirements and industry standards.",
          "category": "Category 1"
        },
        {
          "index": 16,
          "question": "Describe what happens when you type a URL into a browser and hit ENTER.",
          "answer": "When you type a URL into a browser and hit ENTER, several steps occur behind the scenes to retrieve and display the requested web page. Firstly, the browser parses the URL to identify the protocol (HTTP or HTTPS), domain name (such as www.example.com), and optional path or query parameters. Next, it checks its local cache to see if the requested page has been visited recently and if a cached copy exists. If not, the browser sends a request to a DNS server to translate the domain name into an IP address, allowing it to locate the web server hosting the requested page. Once the IP address is obtained, the browser establishes a TCP connection with the web server and sends an HTTP request for the specified resource. The server processes the request, retrieves the requested web page and any associated resources (such as images, stylesheets, or scripts), and sends them back to the browser in an HTTP response. Finally, the browser receives the response, parses the HTML content, renders the web page, and displays it to the user, allowing them to interact with the page's content and functionality.",
          "category": "Category 1"
        },
        {
          "index": 17,
          "question": "What is a TCP connection?",
          "answer": "A TCP (Transmission Control Protocol) connection serves as a reliable communication link between devices on a network, ensuring data exchange with guaranteed delivery. When established, TCP connections facilitate the transfer of information by breaking data into manageable segments, each with its sequence number for ordered transmission. TCP employs error detection and correction mechanisms to maintain data integrity, ensuring that information reaches its destination accurately. Through flow control and congestion avoidance algorithms, TCP regulates data flow to prevent network congestion and optimize transmission rates. In summary, TCP connections play a vital role in enabling efficient and error-free communication between devices over the internet and other networks.",
          "category": "Category 1"
        },
        {
          "index": 18,
          "question": "Describe the difference between HTTP and HTTPS.",
          "answer": "HTTP (Hypertext Transfer Protocol) is the standard protocol used for transmitting data over the Internet. HTTPS (Hypertext Transfer Protocol Secure) is the secure version of HTTP, which uses encryption to ensure that data transmitted between the client and server is secure and cannot be intercepted or tampered with by third parties.",
          "category": "Category 1"
        }
      ]
    },
    {
      "name": "2",
      "questions": [
        {
          "index": 1,
          "question": "What is HTML and what is its role in web development?",
          "answer": "HTML (Hypertext Markup Language) is the standard markup language used to create and structure web pages. It consists of a series of elements or tags that define the structure and content of a web page. HTML elements can include headings, paragraphs, links, images, lists, tables, forms, and more.",
          "category": "Category 2"
        },
        {
          "index": 2,
          "question": "What is CSS and how is it used in styling web pages?",
          "answer": "CSS (Cascading Style Sheets) is a style sheet language used for describing the presentation of a document written in HTML. It enables web developers to control the layout, formatting, and appearance of web pages by applying styles to HTML elements. CSS can be used to set colors, fonts, margins, padding, borders, and more.",
          "category": "Category 2"
        },
        {
          "index": 3,
          "question": "Explain the concept of responsive web design.",
          "answer": "Responsive web design is an approach to web design that ensures web pages render well on a variety of devices and screen sizes. It involves using flexible layouts, fluid grids, and media queries to adapt the layout and design of a website based on the size and capabilities of the device being used to view it.",
          "category": "Category 2"
        },
        {
          "index": 4,
          "question": "What is the box model in CSS and how does it work?",
          "answer": "The box model in CSS describes how elements are rendered on a web page by defining the content area, padding, border, and margin of each element. It consists of four components: content (the actual content of the element), padding (the space between the content and the border), border (the border around the padding), and margin (the space outside the border).",
          "answerImage": "/images/boxmodel.png",
          "category": "Category 2"
        },
        {
          "index": 5,
          "question": "Describe the difference between inline, block, and inline-block elements in HTML/CSS.",
          "answer": "In HTML and CSS, inline elements are displayed inline, meaning they flow along with the surrounding content and do not start on a new line. Block elements, on the other hand, start on a new line and take up the full width available. Inline-block elements are displayed inline but behave like block elements in terms of layout and sizing.",
          "category": "Category 2"
        },
        {
          "index": 6,
          "question": "What are semantic HTML elements and why are they important?",
          "answer": "Semantic HTML elements are HTML elements that convey meaning about the content they contain. Examples include <header>, <footer>, <nav>, <article>, <section>, and <aside>. Using semantic elements improves accessibility, search engine optimization, and maintainability of web pages by providing clearer structure and context to both humans and machines.",
          "category": "Category 2"
        },
        {
          "index": 7,
          "question": "Explain the purpose of the meta tag in HTML.",
          "answer": "The meta tag in HTML is used to provide metadata about the HTML document. Metadata includes information such as the character encoding, viewport settings, author, description, keywords, and more. Meta tags are placed within the <head> section of an HTML document and are not displayed on the web page itself but are used by browsers, search engines, and other web services.",
          "answerImage": "/images/meta.png",
          "category": "Category 2"
        },
        {
          "index": 8,
          "question": "What is the difference between relative and absolute positioning in CSS?",
          "answer": "Relative positioning in CSS positions an element relative to its normal position in the document flow, without changing the layout of surrounding elements. Absolute positioning, on the other hand, positions an element relative to its nearest positioned ancestor or the initial containing block, completely removing it from the document flow. Relative positioning can be useful for fine-tuning the position of elements within a layout without disrupting the flow of other elements.",
          "category": "Category 2"
        },
        {
          "index": 9,
          "question": "Describe the purpose of the <DOCTYPE> declaration in HTML.",
          "answer": "The declaration specifies the document type and version of the HTML standard used in an HTML document. It is placed at the beginning of the document before the <html> tag and informs web browsers about the rules and syntax to use when parsing and rendering the document. The correct <!DOCTYPE> declaration ensures that web pages are displayed consistently across different browsers and devices and helps avoid compatibility issues and quirks mode rendering.",
          "answerImage": "/images/doctype.png",
          "category": "Category 2"
        },
        {
          "index": 10,
          "question": "What are 3 ways to center a div?",
          "answer": "Of course there are many different ways, here are some examples:",
          "answerImage": "/images/centerdiv.png",
          "category": "Category 2"
        },
        {
          "index": 11,
          "question": "What is CSS specificity and what will be the colour of the 2 paragraph elements?",
          "questionImage": "/images/specificity.png",
          "answer": "CSS specificity is how the browser determines which CSS property value should be applied to an HTML element if there are competing selectors. Inline styles have the highest specificity, meaning they will always override styles defined in external or internal stylesheets. Following inline styles are ID selectors, which target specific HTML elements based on their unique IDs. Then come class selectors, attribute selectors, and pseudo-classes, each with decreasing specificity. Finally, element selectors have the lowest specificity. As you can see from this example, the class selector for Paragraph 1 has a higher specificity than the element selector, which is why  different color is applied.",
          "answerImage": "/images/specificityAnswer.png",
          "category": "Category 2"
        },
        {
          "index": 12,
          "question": "How do you calculate specificity?",
          "questionImage": "",
          "answer": "Specificity is calculated based on the types of selectors used in a CSS rule. Each selector type contributes to the specificity score, with higher scores indicating higher specificity. Inline styles have the highest specificity (1,0,0,0), followed by ID selectors (0,1,0,0), class selectors (0,0,1,0), attribute selectors (0,0,0,1), and pseudo-classes (0,0,0,1). The count for each type of selector is summed up to determine the specificity score. If two rules have the same specificity, the one declared later in the CSS file will be applied due to the cascading nature of CSS.",
          "answerImage": "/images/calSpecificity.png",
          "category": "Category 2"
        }
      ]
    },

    {
      "name": "3",
      "questions": [
        {
          "index": 1,
          "question": "Describe the role of JavaScript in web development.",
          "answer": "JavaScript is a high-level, interpreted programming language primarily used to add interactivity and dynamic behavior to web pages. It enables web developers to create interactive elements, handle user input, manipulate the DOM, make asynchronous requests to servers, and much more. JavaScript is widely used in web development, both on the client-side (in web browsers) and server-side (with Node.js).",
          "category": "Category 3"
        },
        {
          "index": 2,
          "question": "What are variables in JavaScript?",
          "answer": "In JavaScript, variables are containers for storing data values. They are used to hold various types of data, such as numbers, strings, objects, and more. Variables are declared using the var, let, or const keywords, followed by a unique name. These names, also known as identifiers, can consist of letters, digits, underscores, and dollar signs, but cannot start with a digit. Variables can be assigned values using the assignment operator (=). They provide flexibility and efficiency in managing and manipulating data within JavaScript code, making it easier to create dynamic and interactive applications.",
          "category": "Category 3"
        },
        {
          "index": 3,
          "question": "Explain the difference between == and === in JavaScript.",
          "answer": "In JavaScript, the == operator checks if two values are equal, even if they're different types. It converts them to the same type before comparing. The === operator, however, checks for strict equality. It compares both the value and the type of the values, returning true only if they're exactly the same.",
          "answerImage": "/images/equal.png",
          "category": "Category 3"
        },
        {
          "index": 4,
          "question": "What is event handling in JavaScript?",
          "answer": "Event handling in JavaScript involves responding to user interactions or system events, such as mouse clicks, keyboard input, form submissions, or page load. Event listeners are used to attach event handlers to DOM elements, specifying the type of event to listen for and the function to execute when the event occurs. Event handling enables web developers to create interactive and responsive web applications.",
          "category": "Category 3"
        },
        {
          "index": 5,
          "question": "Describe the concept of DOM (Document Object Model) in web development.",
          "answer": "The Document Object Model (DOM) is a programming interface for web documents. It represents the structure of HTML and XML documents as a tree of objects, where each node corresponds to an element, attribute, or piece of text in the document. The DOM provides methods and properties for accessing, manipulating, and updating the content, structure, and style of web documents dynamically using JavaScript or other scripting languages.",
          "category": "Category 3"
        },
        {
          "index": 6,
          "question": "How does JavaScript interact with the DOM?",
          "answer": "JavaScript interacts with the DOM by accessing and manipulating DOM elements and their properties and methods. It can select elements using methods such as getElementById(), getElementsByClassName(), or querySelector(), and then modify their content, attributes, styles, or event handlers using properties and methods such as innerHTML, className, style, or addEventListener(). JavaScript can also create new elements, remove existing elements, or traverse the DOM tree to navigate between elements and their ancestors, siblings, or children.",
          "category": "Category 3"
        },
        {
          "index": 7,
          "question": "What are the differences between `var` `let` and `const`?",
          "answer": "Variables in JavaScript, like var, let, and const, vary in scope, hoisting, and reassignment. var is function-scoped and hoisted to the top of its function or global scope, while let and const are block-scoped. let and const allow reassignment, but const values can't be changed after initialization, though properties of objects and arrays declared with const can be modified. Overall, let and const offer better scoping and prevent common bugs, with const being useful for constants that remain unchanged.",
          "category": "Category 3"
        },
        {
          "index": 8,
          "question": "What is hoisting in JavaScript?",
          "answer": "Hoisting in JavaScript is a behavior where variable and function declarations are moved to the top of their containing scope during the compilation phase, before the code is executed. This means that regardless of where variables and functions are declared within their scope, they are accessible and can be used before they are formally declared in the code. <br><br>However, only the declarations are hoisted, not the initializations. This can sometimes lead to unexpected behavior if not understood properly, as it may seem that variables are used before they are declared, although it's actually due to hoisting. <br><br>In this example, even though x is logged before it's declared and initialized, it doesn't cause an error. This is because the declaration var x; is hoisted to the top of the scope, making x accessible throughout the function, albeit with an initial value of undefined. <br><br>In this case, trying to access y before its declaration results in a ReferenceError. This is because let variables are not initialized until their actual declaration, unlike var variables which are initialized with undefined during hoisting.",
          "answerImage": "/images/hoisting.png",
          "category": "Category 3"
        },
        {
          "index": 9,
          "question": "What are JavaScript data types?",
          "answer": "JavaScript has several data types, including primitive types such as numbers, strings, booleans, null, undefined, and symbols, as well as complex types such as objects, arrays and functions. Each data type has its own characteristics and behavior when used in JavaScript code.",
          "answerImage": "/images/datatypes.png",
          "category": "Category 3"
        },
        {
          "index": 10,
          "question": "Explain the difference between null and undefined in JavaScript.",
          "answer": "In JavaScript, null represents the intentional absence of any value, while undefined indicates that a variable has been declared but has not been assigned a value. null is a primitive value, whereas undefined is a type and a value. null is often used to explicitly indicate that a variable has no value, while undefined typically indicates unintentional absence or an uninitialized state.",
          "category": "Category 3"
        },
        {
          "index": 11,
          "question": "What is a closure in JavaScript?",
          "answer": "A closure is a feature in JavaScript where an inner function has access to the outer function's variables, even after the outer function has finished executing. This allows the inner function to remember and access the variables in its lexical scope, even when called from a different scope. Closures are commonly used in JavaScript to create private variables, encapsulate functionality, and maintain state.",
          "category": "Category 3"
        },
        {
          "index": 12,
          "question": "Explain the concept of asynchronous programming in JavaScript.",
          "answer": "Asynchronous programming in JavaScript allows code to execute non-blocking operations, meaning that other code can continue to run while waiting for the asynchronous operation to complete. This is typically achieved using callbacks, promises, or async/await syntax. Asynchronous operations are commonly used for tasks such as fetching data from a server, reading files, or performing animations, where the result may not be immediately available.",
          "category": "Category 3"
        },
        {
          "index": 13,
          "question": "What is the event loop in JavaScript?",
          "answer": "The event loop is a mechanism in JavaScript that allows asynchronous tasks (such as callbacks, promises, and events) to be executed in a non-blocking manner. It continuously checks the call stack for tasks to execute, as well as the message queue for pending events. When the call stack is empty, the event loop takes the next task from the message queue and pushes it onto the call stack for execution, ensuring that the program remains responsive and can handle asynchronous operations efficiently.",
          "category": "Category 3"
        },
        {
          "index": 14,
          "question": "What are higher-order functions in JavaScript?",
          "answer": "Higher-order functions are functions that can accept other functions as arguments and/or return functions as results. They enable powerful and flexible programming patterns, such as functional programming and callbacks. Examples of higher-order functions in JavaScript include map, filter, reduce, and forEach, which operate on arrays and accept callback functions to define custom behavior.",
          "category": "Category 3"
        },
        {
          "index": 15,
          "question": "Explain the concept of scope in JavaScript.",
          "answer": "Scope refers to the visibility and accessibility of variables in JavaScript. Variables can have global scope, function scope, or block scope, depending on where they are declared. Global variables are accessible throughout the entire program, while function-scoped variables are only accessible within the function where they are declared. Block-scoped variables, introduced in ES6 with let and const, are confined to the block where they are declared, such as loops or conditionals.",
          "category": "Category 3"
        },
        {
          "index": 16,
          "question": "What is the difference between synchronous and asynchronous code execution in JavaScript?",
          "answer": "Synchronous code execution occurs sequentially, where each statement is executed one after the other, blocking the execution of subsequent statements until the current one is completed. Asynchronous code execution, on the other hand, allows tasks to be executed concurrently, without waiting for previous tasks to complete. Asynchronous operations are often used for tasks that involve I/O operations, such as fetching data from a server or reading files, to avoid blocking the main thread and improve performance.",
          "category": "Category 3"
        },
        {
          "index": 17,
          "question": "How do you handle errors in JavaScript?",
          "answer": "Error handling in JavaScript involves using try-catch blocks to catch and handle exceptions that may occur during the execution of code. The try block contains the code that may throw an exception, while the catch block handles the exception if one occurs, allowing the program to gracefully recover from errors. Additionally, JavaScript provides built-in error objects such as Error, SyntaxError, TypeError, and ReferenceError to represent different types of errors, which can be used to provide more detailed information about the error to the developer or user.",
          "category": "Category 3"
        }
      ]
    },
    {
      "name": "4",
      "questions": [
        {
          "index": 1,
          "question": "What is Vue.js?",
          "answer": "Vue.js is a progressive JavaScript framework used for building user interfaces (UIs) and single-page applications (SPAs).",
          "category": "Category 4"
        },
        {
          "index": 2,
          "question": "What are the key features of Vue 3?",
          "answer": "Vue 3 introduces several key features including Composition API, Teleport, Fragments, Suspense, and improved TypeScript support.",
          "category": "Category 4"
        },
        {
          "index": 3,
          "question": "What is the Composition API in Vue 3?",
          "answer": "The Composition API allows developers to organize component logic into reusable functions called composition functions, promoting better code organization and reusability.",
          "category": "Category 4"
        },
        {
          "index": 4,
          "question": "Explain Teleport in Vue 3.",
          "answer": "Teleport is a new feature in Vue 3 that allows you to render a component's children to a different part of the DOM, helping with creating modal dialogs, tooltips, and other overlays.",
          "category": "Category 4"
        },
        {
          "index": 5,
          "question": "What are Fragments in Vue 3?",
          "answer": "Fragments allow multiple children to be grouped together without needing an extra DOM element. This helps in simplifying the component structure.",
          "category": "Category 4"
        },
        {
          "index": 6,
          "question": "What is Suspense in Vue 3?",
          "answer": "Suspense is a feature in Vue 3 that allows components to define fallback content while waiting for asynchronous components to resolve their data.",
          "category": "Category 4"
        },
        {
          "index": 7,
          "question": "How does Vue 3 handle reactivity differently from Vue 2?",
          "answer": "Vue 3 uses a more efficient reactivity system (Vue 3 Reactivity) based on ES6 Proxies, offering better performance compared to Vue 2's Object.defineProperty-based system.",
          "category": "Category 4"
        },
        {
          "index": 8,
          "question": "Explain the changes in the template syntax in Vue 3.",
          "answer": "Vue 3 introduces the v-model directive that provides a more consistent and flexible way to work with form inputs and custom components.",
          "category": "Category 4"
        },
        {
          "index": 9,
          "question": "What is the role of the reactive and ref functions in Vue 3?",
          "answer": "reactive and ref are functions in Vue 3 used for creating reactive objects and primitive values respectively, enabling Vue's reactivity system.",
          "category": "Category 4"
        },
        {
          "index": 10,
          "question": "How does Vue 3 handle template compilation?",
          "answer": "Vue 3 uses a streamlined template compilation process with a more efficient and modular compiler architecture, resulting in faster template updates.",
          "category": "Category 4"
        },
        {
          "index": 11,
          "question": "What is the watchEffect function in Vue 3?",
          "answer": "watchEffect is a function in Vue 3 that automatically tracks reactive dependencies used inside its callback, re-running the callback whenever any tracked dependency changes.",
          "category": "Category 4"
        },
        {
          "index": 12,
          "question": "How can you optimize performance in Vue 3 applications?",
          "answer": "Performance optimization techniques in Vue 3 include using reactive and ref appropriately, leveraging watchEffect for reactive updates, optimizing component rendering with shouldComponentUpdate, and using production builds for smaller bundle sizes.",
          "category": "Category 4"
        },
        {
          "index": 13,
          "question": "What are composables in Vue 3?",
          "answer": "Answer: Composables in Vue 3 are functions that encapsulate reusable logic and state management, designed to be composable (hence the name) and shareable across multiple components. They leverage the Composition API to encapsulate reactive state, computed properties, methods, and lifecycle hooks in a way that promotes code organization and reusability. Composables typically return reactive objects or functions that can be directly used in Vue components, enhancing maintainability and scalability of Vue applications.",
          "category": "Category 4"
        }
      ]
    },
    {
      "name": "5",
      "questions": [
        {
          "index": 1,
          "question": "What is Git?",
          "answer": "Git is a distributed version control system used for tracking changes in source code during software development. It allows multiple developers to collaborate on projects by providing features such as branching, merging, and version history tracking.",
          "category": "Category 5"
        },
        {
          "index": 2,
          "question": "What is GitHub?",
          "answer": "GitHub is a web-based hosting service for version control using Git. It provides a platform for developers to store, manage, and share their Git repositories. GitHub offers collaboration features such as issue tracking, pull requests, and project management tools.",
          "category": "Category 5"
        },
        {
          "index": 3,
          "question": "What is a repository in Git?",
          "answer": "A repository, or repo, in Git is a collection of files and folders along with the version history of those files. It serves as a central storage location for a project's source code and allows developers to track changes, collaborate, and maintain different versions of the codebase.",
          "category": "Category 5"
        },
        {
          "index": 4,
          "question": "What is the 'git clone' command used for?",
          "answer": "The 'git clone' command is used to create a copy, or clone, of an existing Git repository. It allows users to download the entire repository, including all files, branches, and commit history, to their local machine. Cloning a repository is often done when starting work on a project or when collaborating with others.",
          "category": "Category 5"
        },
        {
          "index": 5,
          "question": "Explain the purpose of the 'git status' command.",
          "answer": "The 'git status' command is used to display the current state of the Git repository. It shows information such as which files have been modified, which files are staged for commit, and which branch the repository is currently on. This command is helpful for tracking changes and determining the next steps in the development workflow.",
          "category": "Category 5"
        },
        {
          "index": 6,
          "question": "What does the 'git add' command do?",
          "answer": "The 'git add' command is used to stage changes for commit in the Git repository. It adds modified or new files to the staging area, allowing them to be included in the next commit. The 'git add' command is typically followed by the name of the file or directory to be staged, or it can be used with the '.' wildcard to stage all changes.",
          "category": "Category 5"
        },
        {
          "index": 7,
          "question": "What is the purpose of the 'git commit' command?",
          "answer": "The 'git commit' command is used to record changes to the Git repository. It creates a new commit containing the staged changes along with a commit message that describes the changes made. Commits are snapshots of the repository's state at a specific point in time, allowing developers to track the history of changes and revert to previous versions if needed.",
          "category": "Category 5"
        },
        {
          "index": 8,
          "question": "Explain the difference between 'git pull' and 'git push' commands.",
          "answer": "The 'git pull' command is used to fetch and merge changes from a remote repository into the current branch. It downloads new commits from the remote repository and incorporates them into the local branch. On the other hand, the 'git push' command is used to upload local commits to a remote repository. It sends the local branch's commits to the remote repository, updating the branch's history on the remote server.",
          "category": "Category 5"
        },
        {
          "index": 9,
          "question": "What does the 'git branch' command do?",
          "answer": "The 'git branch' command is used to list, create, or delete branches in the Git repository. When used without any arguments, it displays a list of existing branches and highlights the current branch. By providing a branch name, it creates a new branch with that name. Additionally, the 'git branch' command can be used with the '-d' flag to delete a specified branch.",
          "category": "Category 5"
        },
        {
          "index": 10,
          "question": "Explain the purpose of the 'git checkout' command.",
          "answer": "The 'git checkout' command is used to switch between different branches or to restore files from a specific commit. When followed by a branch name, it updates the working directory to reflect the state of the specified branch, allowing developers to work on different features or fixes. Additionally, the 'git checkout' command can be used with a file or commit hash to restore the file's contents to a previous state.",
          "category": "Category 5"
        },
        {
          "index": 11,
          "question": "What is npm?",
          "answer": "npm, or Node Package Manager, is a package manager for JavaScript. It allows developers to install, manage, and share packages of code, commonly used in Node.js projects. npm facilitates dependency management by automatically installing the necessary packages and their dependencies based on a project's package.json file.",
          "category": "Category 5"
        },
        {
          "index": 12,
          "question": "What is a package.json file?",
          "answer": "A package.json file is a metadata file used in Node.js projects to specify project dependencies, scripts, and other configuration details. It contains information such as the project's name, version, description, author, and a list of dependencies required for the project to run. The package.json file serves as the entry point for npm to manage project dependencies and execute scripts defined in the file.",
          "category": "Category 5"
        },
        {
          "index": 13,
          "question": "How do you install a package using npm?",
          "answer": "To install a package using npm, you can use the 'npm install' command followed by the name of the package. For example, 'npm install lodash' installs the lodash package. Additionally, you can specify the package version or tag to install a specific version, or use the '--save' or '--save-dev' flag to save the package as a dependency in the project's package.json file.",
          "category": "Category 5"
        },
        {
          "index": 14,
          "question": "What is React?",
          "answer": "React is a JavaScript library for building user interfaces, developed and maintained by Facebook. It allows developers to create reusable UI components that compose a web application's user interface. React uses a declarative approach to describe how the UI should look and automatically updates the UI when the underlying data changes, making it efficient and scalable for building complex applications.",
          "category": "Category 5"
        },
        {
          "index": 15,
          "question": "Explain the concept of JSX in React.",
          "answer": "JSX, or JavaScript XML, is a syntax extension for JavaScript used in React to describe the structure of user interfaces. It allows developers to write HTML-like code directly within JavaScript files, making it easier to visualize and build UI components. JSX is transpiled into regular JavaScript function calls by tools like Babel before being interpreted by the browser.",
          "category": "Category 5"
        },
        {
          "index": 16,
          "question": "What is a pull request in GitHub?",
          "answer": "A pull request in GitHub is a way to propose changes to a repository hosted on GitHub. It allows developers to submit their changes for review and collaboration before merging them into the main branch. Pull requests provide a discussion platform where reviewers can comment on the proposed changes, suggest improvements, and ultimately approve or reject the changes.",
          "category": "Category 5"
        },
        {
          "index": 17,
          "question": "How do you merge branches in Git?",
          "answer": "To merge branches in Git, you can use the 'git merge' command followed by the name of the branch to be merged into the current branch. For example, 'git merge feature-branch' merges the 'feature-branch' into the current branch. Git automatically combines the changes from both branches and creates a new merge commit if necessary.",
          "category": "Category 5"
        },
        {
          "index": 18,
          "question": "What is a package-lock.json file?",
          "answer": "The package-lock.json file is a file generated by npm that keeps track of the exact version of each package and its dependencies installed in a project. It ensures that the same versions of packages are installed on all machines and in continuous integration environments, preventing unexpected version conflicts. The package-lock.json file is automatically generated and updated by npm when installing or updating packages.",
          "category": "Category 5"
        },
        {
          "index": 19,
          "question": "How do you install global npm packages?",
          "answer": "To install npm packages globally, you can use the '-g' or '--global' flag with the 'npm install' command followed by the package name. For example, 'npm install -g nodemon' installs the nodemon package globally. Global packages are installed in a system-wide directory and can be accessed from any directory or project on the machine.",
          "category": "Category 5"
        },
        {
          "index": 20,
          "question": "What is React Router?",
          "answer": "React Router is a routing library for React applications that allows developers to manage navigation and URL routing in single-page applications. It provides components like BrowserRouter, Route, Switch, and Link to define and handle different routes in the application. React Router enables client-side routing by synchronizing the UI with the URL without causing a full page refresh.",
          "category": "Category 5"
        },
        {
          "index": 21,
          "question": "What are props in React?",
          "answer": "Props, short for properties, are a way to pass data from parent components to child components in React. They are immutable and are used to customize and configure child components dynamically. Props are specified as attributes on JSX elements when rendering components and are accessible within the component as an object.",
          "category": "Category 5"
        },
        {
          "index": 22,
          "question": "What is the purpose of state in React?",
          "answer": "State is a built-in feature in React that allows components to manage and maintain their own data. It represents the mutable data that can change over time, such as user input, component state, or API responses. State is managed internally by React components and can be updated using the 'setState' method, triggering a re-render of the component and its children.",
          "category": "Category 5"
        }
      ]
    }
  ]
}
